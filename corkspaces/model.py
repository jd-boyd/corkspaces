# sqlautocode postgres://xxxxxx:xxxxxx@x.x.x.x/xxxxx -o model.py -g -d -e
#autogenerated by sqlautocode

import datetime

from sqlalchemy import *
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import relation, relationship, backref

from sqlalchemy.orm import sessionmaker
from sqlalchemy import create_engine


DeclarativeBase = declarative_base()
metadata = DeclarativeBase.metadata

from sqlalchemy.dialects.postgresql import *


def datetime_to_int(obj):
    """Default JSON serializer."""
    import calendar

    if isinstance(obj, datetime.datetime):
        if obj.utcoffset() is not None:
            obj = obj - obj.utcoffset()
        millis = int(
            calendar.timegm(obj.timetuple()) * 1000 +
            obj.microsecond / 1000
        )
        return millis
    return obj


class Workspace(DeclarativeBase):
    __table_args__ = {}

    #column definitions
    date_added = Column(u'date_added', TIMESTAMP())
    date_touched = Column(u'date_touched', TIMESTAMP())
    isdropped = Column(u'isdropped', BOOLEAN())
    title = Column(u'title', TEXT())
    uid = Column(u'uid', INTEGER())

    #relation definitions
    def __init__(self, uid, title):
        ts = datetime.datetime.today()

        self.uid = uid
        self.title = title
        self.isdropped = False
        self.date_added = ts
        self.date_touched = ts

    def __repr__(self):
        return "<Workspace(%r, %r, %r)>" % (self.cid, self.uid, self.url)

    def as_dict(self):
        return {c.name: datetime_to_int(getattr(self, c.name))
                for c in self.__table__.columns}

    def drop(self):
        self.isdropped = True


class Entry(DeclarativeBase):
    __table_args__ = {}

    #column definitions
    date_added = Column(u'date_added', TIMESTAMP())
    date_touched = Column(u'date_touched', TIMESTAMP())
    isdropped = Column(u'isdropped', BOOLEAN())
    uid = Column(u'uid', INTEGER())

    x = Column(INTEGER())
    y = Column(INTEGER())
    width = Column(INTEGER())
    height = Column(INTEGER())

    content = Column(TEXT())

    #relation definitions
    def __init__(self, uid, cid, url, title):
        ts = datetime.datetime.today()

        self.uid = uid
        self.isdropped = False
        self.date_added = ts
        self.date_touched = ts

    def __repr__(self):
        return "<Entry(%r, %r, %r)>" % (self.cid, self.uid, self.url)

    def as_dict(self):
        return {c.name: datetime_to_int(getattr(self, c.name))
                for c in self.__table__.columns}

    def drop(self):
        self.isdropped = True


class Session(DeclarativeBase):
    __table_args__ = {}

    #column definitions
    date_added = Column(u'date_added', TIMESTAMP())
    sid = Column(u'sid', INTEGER(), primary_key=True, nullable=False)
    uid = Column(u'uid', INTEGER())
    uuid = Column(u'uuid', CHAR(length=36))

    #relation definitions
    def __init__(self, uid, uuid):
        self.uid = uid
        self.date_added = datetime.datetime.today()
        self.uuid = uuid

    def __repr__(self):
        return "<Session(%r, %r)>" % (self.uid, self.uuid)


class User(DeclarativeBase):
    __table_args__ = {}

    #column definitions
    date_added = Column(u'date_added', TIMESTAMP())
    defaultcid = Column(u'defaultcid', INTEGER())
    email = Column(u'email', VARCHAR(length=320))
    name = Column(u'name', VARCHAR(length=100))
    password = Column(u'password', CHAR(length=32))
    uid = Column(u'uid', INTEGER(), primary_key=True, nullable=False)
    validated = Column(u'validated', BOOLEAN())

    #relation definitions

    def __init__(self, email, name, password):
        #email, name, password, date_added, validated
        self.email = email
        self.name = name
        self.password = password
        self.date_added = datetime.datetime.today()
        self.validated = True

    def __repr__(self):
        return "<User(%r, %r, %r)>" % (self.uid, self.name, self.validated)


class Validation(DeclarativeBase):
    __table_args__ = {}

    #column definitions
    uid = Column(u'uid', INTEGER())
    uuid = Column(u'uuid', CHAR(length=36))
    vid = Column(u'vid', INTEGER(), primary_key=True, nullable=False)

    #relation definitions


def get_session(url, echo=False):
    Session = sessionmaker()
    engine = create_engine(url, echo=echo)
    Session.configure(bind=engine)  # once engine is available
    DeclarativeBase.metadata.create_all(engine)
    metadata.bind = engine
    return Session()
